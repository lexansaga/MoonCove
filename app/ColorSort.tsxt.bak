import Button from "@Components/Button";
import React, { useState } from "react";
import {
  StyleSheet,
  TouchableOpacity,
  View,
  ScrollView,
  Text,
  Image,
  ToastAndroid,
} from "react-native";
import tinycolor from "tinycolor2";

export default function ColorSort() {
  const [colorGrid, setColorGrid] = useState<
    { color: string; originalIndex: number }[]
  >(generateColors());
  const [isSorted, setIsSorted] = useState(false);
  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);
  const [level, setLevel] = useState(1);

  const GRID_COLUMNS = 2; // Number of columns for the grid

  // Generate 10 colors around a random base color
  function generateColors(): { color: string; originalIndex: number }[] {
    const baseColor = tinycolor.random().toHexString(); // Generate a random base color
    const colors: { color: string; originalIndex: number }[] = [];
    for (let i = -5; i <= 5; i++) {
      if (i !== 0) {
        const newColor =
          i > 0
            ? tinycolor(baseColor)
                .lighten(i * 5)
                .toHexString()
            : tinycolor(baseColor)
                .darken(Math.abs(i) * 5)
                .toHexString();
        colors.push({ color: newColor, originalIndex: colors.length });
      }
    }
    return colors.sort(() => Math.random() - 0.5); // Shuffle for randomness
  }

  // Handle color selection and swapping
  const handleColorPress = (index: number) => {
    if (selectedIndices.length === 0) {
      // First color selected
      setSelectedIndices([index]);
    } else if (selectedIndices.length === 1) {
      // Second color selected, swap positions
      const [firstIndex] = selectedIndices;
      const newColorGrid = [...colorGrid];
      [newColorGrid[firstIndex], newColorGrid[index]] = [
        newColorGrid[index],
        newColorGrid[firstIndex],
      ];
      setColorGrid(newColorGrid);
      setSelectedIndices([]); // Reset selection

      // Check if sorted after the swap
      checkIfSorted(newColorGrid);
    }
  };

  // Check if the color grid is sorted by brightness (vertically)
  const checkIfSorted = (grid: { color: string; originalIndex: number }[]) => {
    let sorted = true;
    for (let col = 0; col < GRID_COLUMNS; col++) {
      for (let row = 1; row < grid.length / GRID_COLUMNS; row++) {
        const currentIndex = row * GRID_COLUMNS + col;
        const previousIndex = (row - 1) * GRID_COLUMNS + col;

        if (currentIndex < grid.length) {
          const currentBrightness = tinycolor(
            grid[currentIndex].color
          ).getBrightness();
          const previousBrightness = tinycolor(
            grid[previousIndex].color
          ).getBrightness();

          if (previousBrightness > currentBrightness) {
            sorted = false;
            break;
          }
        }
      }
      if (!sorted) break;
    }

    setIsSorted(sorted);
    if (sorted) {
      ToastAndroid.showWithGravity(
        "Colors are sorted correctly!",
        ToastAndroid.SHORT,
        ToastAndroid.BOTTOM
      );
      console.log("Colors are sorted correctly.");
    } else {
      console.log("Colors are not sorted.");
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.scrollViewContent}>
      <Text style={styles.title}>Level {level.toString()}</Text>
      <View style={styles.container}>
        <View style={styles.colorGrid}>
          {colorGrid.map((item, index) => {
            const isDarkColor = tinycolor(item.color).isDark();
            return (
              <TouchableOpacity
                key={index}
                style={[styles.colorBox, { backgroundColor: item.color }]}
                onPress={() => handleColorPress(index)}
                activeOpacity={0.8}
              >
                <Text
                  style={[
                    styles.colorIndexText,
                    { color: isDarkColor ? "#FFF" : "#000" },
                  ]}
                >
                  {item.originalIndex}
                </Text>
                {selectedIndices.includes(index) && (
                  <Image
                    source={require("@Assets/glitters-left.png")}
                    style={styles.selectedColorImage}
                  />
                )}
              </TouchableOpacity>
            );
          })}
        </View>
        <View style={styles.btnWrapper}>
          {!isSorted && (
            <Button title="Check" onPress={() => checkIfSorted(colorGrid)} />
          )}
          {isSorted && (
            <Button
              title="Next Level"
              onPress={() => {
                setColorGrid(generateColors()); // Generate new grid for next round
                setIsSorted(false); // Reset sorted state
                setLevel(level + 1); // Increment level
              }}
            />
          )}
        </View>
      </View>

      <View
        style={{
          flex: 1,
          height: "100%",
          width: "100%",
          position: "absolute",
          bottom: 0,
          left: 0,
          right: 0,
        }}
        pointerEvents="none"
      >
        <Image
          source={require("@Assets/shooting-star.png")}
          style={styles.floatingRight}
        />
        <Image
          source={require("@Assets/planet.png")}
          style={styles.floatingLeft}
        />
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  scrollViewContent: {
    flexGrow: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  container: {
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FDE1D4",
    padding: 20,
    borderRadius: 25,
    paddingBottom: 35,
  },
  title: {
    fontSize: 32,
    color: "#333",
    marginBottom: 20,
    // fontWeight: 500,
    // fontFamily: "HazelnutMilktea-Bold",
  },
  colorGrid: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-around",
    width: "80%",
  },
  colorBox: {
    width: "50%",
    height: 60,
    borderRadius: 50,
    justifyContent: "center",
    alignItems: "center",
  },
  colorIndexText: {
    fontWeight: "bold",
    fontSize: 12,
  },
  selectedColorImage: {
    height: "50%",
    resizeMode: "contain",
    tintColor: "#FFF",
  },
  btnWrapper: {
    marginTop: 20,
    display: "flex",
    justifyContent: "center",
    gap: 8,
  },
  floatingLeft: {
    position: "absolute",
    bottom: 0,
    left: 0,
    transform: [{ translateX: -50 }, { translateY: 200 }],
    width: "80%",
    resizeMode: "contain",
    pointerEvents: "none",
  },
  floatingRight: {
    position: "absolute",
    top: 0,
    right: 0,
    transform: [{ translateX: 50 }, { translateY: -50 }],
    width: "80%",
    resizeMode: "contain",
    pointerEvents: "none",
  },
});
